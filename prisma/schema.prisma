// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      UserRole @default(MANAGER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Audit trail
  events    Event[]
  
  @@map("users")
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String
  addresses Address[]
  
  // Relationships
  quotes    Quote[]
  rentals   Rental[]
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  
  @@map("customers")
}

model Address {
  id         String  @id @default(cuid())
  street     String
  city       String
  state      String
  zipCode    String
  country    String  @default("US")
  
  // Relationships
  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?
  
  quotes     Quote[]
  rentals    Rental[]
  
  @@map("addresses")
}

model Quote {
  id             String        @id @default(cuid())
  customer       Customer      @relation(fields: [customerId], references: [id])
  customerId     String
  serviceAddress Address       @relation(fields: [serviceAddressId], references: [id])
  serviceAddressId String
  
  // Quote details
  rampHeight     Float?
  timelineNeeded TimelineType
  serviceType    ServiceType
  monthlyRate    Float?
  installationFee Float?
  estimatedDuration String?
  
  // Status and lifecycle
  status         QuoteStatus   @default(PENDING)
  expiresAt      DateTime
  sentAt         DateTime?
  
  // Relationships
  agreement      Agreement?
  
  // Metadata
  notes          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
  @@map("quotes")
}

model Agreement {
  id                    String          @id @default(cuid())
  quote                 Quote           @relation(fields: [quoteId], references: [id])
  quoteId               String          @unique
  
  // E-signature details
  esignatureDocumentId  String?
  signedAt              DateTime?
  contractTerms         Json?
  specialConditions     String?
  
  // Status
  status                AgreementStatus @default(DRAFT)
  
  // Relationships
  rental                Rental?
  
  // Metadata
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  
  @@map("agreements")
}

model Rental {
  id                    String        @id @default(cuid())
  agreement             Agreement     @relation(fields: [agreementId], references: [id])
  agreementId           String        @unique
  customer              Customer      @relation(fields: [customerId], references: [id])
  customerId            String
  serviceAddress        Address       @relation(fields: [serviceAddressId], references: [id])
  serviceAddressId      String
  
  // Rental details
  rampConfiguration     Json?
  startDate             DateTime
  endDate               DateTime?
  monthlyRate           Float
  
  // Installation tracking
  installationScheduled DateTime?
  installationCompleted DateTime?
  removalScheduled      DateTime?
  removalCompleted      DateTime?
  
  // Status and inventory
  status                RentalStatus  @default(SCHEDULED)
  equipmentInventoryIds String[]
  technicianNotes       String?
  
  // Relationships
  payments              Payment[]
  
  // Metadata
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  
  @@map("rentals")
}

model Payment {
  id                   String        @id @default(cuid())
  rental               Rental        @relation(fields: [rentalId], references: [id])
  rentalId             String
  
  // Stripe integration
  stripePaymentIntentId String?
  
  // Payment details
  amount               Float
  type                 PaymentType
  dueDate              DateTime
  paidDate             DateTime?
  
  // Status and retry logic
  status               PaymentStatus @default(PENDING)
  failureReason        String?
  retryCount           Int           @default(0)
  
  // Metadata
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  
  @@map("payments")
}

model Settings {
  id    String @id @default(cuid())
  key   String @unique
  value Json
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("settings")
}

model Event {
  id         String   @id @default(cuid())
  entityType String
  entityId   String
  eventType  String
  eventData  Json
  
  // User tracking
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
  ipAddress  String?
  
  // Metadata
  timestamp  DateTime @default(now())
  
  @@map("events")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  TECHNICIAN
  BILLING
}

enum TimelineType {
  ASAP
  WITHIN_3_DAYS
  WITHIN_1_WEEK
  FLEXIBLE
}

enum ServiceType {
  POST_SURGERY
  AGING_IN_PLACE
  TRANSITIONAL_HOSPICE
}

enum QuoteStatus {
  NEEDS_ASSESSMENT
  PENDING
  SENT
  ACCEPTED
  EXPIRED
  DECLINED
}

enum AgreementStatus {
  DRAFT
  SENT
  SIGNED
  CANCELLED
}

enum RentalStatus {
  SCHEDULED
  ACTIVE
  ENDING
  COMPLETED
  CANCELLED
}

enum PaymentType {
  INSTALLATION_FEE
  MONTHLY_RENT
  LATE_FEE
  DAMAGE_FEE
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
} 